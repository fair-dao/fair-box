@page "/appCenter/logs/{HostName}"
@inherits AppCenterBase
@namespace FairBox.SuperHost.Pages
@inject IDialogService DialogService
<FairdaoPage ContentPadding>
    <TitlePanel>
        @Localer["日志列表"] - (@CurAppHost?.Name)
    </TitlePanel>
    <ActionPanel>
        <FluentIcon Value="@(new Icons.Regular.Size24.AddCircle())" Color="Color.Fill" />
    </ActionPanel>
    <ContentPanel>
        <FluentStack Orientation="Orientation.Vertical">
            <FluentAppBar Orientation="Orientation.Horizontal" Style="width:100%">
                <FluentAppBarItem IconRest="HomeIcon()"
                                  IconActive="HomeIcon(active: true)"
                                  Text="应用日志" OnClick="@(()=>{LogName="Application";LoadLogs();})" />
                <FluentAppBarItem IconRest="AppBarIcon()"
                                  IconActive="AppBarIcon(active: true)"
                                  Text="系统日志"
                                  OnClick="@(()=>{LogName="System";LoadLogs();})" />
                <FluentAppBarItem IconRest="WhatsNewIcon()"
                                  IconActive="WhatsNewIcon(active: true)"
                                  Text="安全日志" OnClick="@(()=>{LogName="Security";LoadLogs();})" />

            </FluentAppBar>
        </FluentStack>
        <FluentToolbar>
            <FluentSpacer />
            <FluentButton Appearance="Appearance.Accent" OnClick="@(()=>{LogType="";LoadLogs();})">所有</FluentButton>
            <FluentButton Appearance="Appearance.Accent" OnClick="@(()=>{LogType="Warning";LoadLogs();})">警告</FluentButton>
            <FluentButton Appearance="Appearance.Accent" OnClick="@(()=>{LogType="Error";LoadLogs();})">错误</FluentButton>
            <FluentButton Appearance="Appearance.Accent" OnClick="ClearLog">清除日志</FluentButton>
        </FluentToolbar>
        <FluentDataGrid Items="@LogList" Virtualize="true" ItemSize="46" Pagination="@pagination" Loading="this.Loaded==false">
            <ChildContent>
                <TemplateColumn Title="发生时间" Align="Align.Center" Width="12rem">
                    @(context.LogTime)
                </TemplateColumn>
                <TemplateColumn Title="事件名" Align="Align.Center" Width="8rem">
                    @(context.LogName)
                </TemplateColumn>
                <TemplateColumn Title="日志类型" Align="Align.Center" Width="8rem">
                    @(context.EntryType)
                </TemplateColumn>
                <TemplateColumn Title="信息" TooltipText="o=>o.Message" Tooltip="true">
                    @((MarkupString)context.Message)
                </TemplateColumn>
                <TemplateColumn Title="操作" Align="@Align.End">
                    <FluentButton Id="@context.Id" Title="详情" IconEnd="@(new Icons.Regular.Size20.AppsListDetail())" />

                    <FluentTooltip Anchor="@context.Id"
                                   Delay="300"
                                   MaxWidth="400px"
                                   Position="TooltipPosition.Bottom">@context.Message</FluentTooltip>
                </TemplateColumn>

            </ChildContent>
            <EmptyContent>
                <FairdaoPageMessage RecordNotFound></FairdaoPageMessage>
            </EmptyContent>
            <LoadingContent>
                <FluentProgressRing></FluentProgressRing>
            </LoadingContent>

        </FluentDataGrid>
        <FluentPaginator State="@pagination" />
    </ContentPanel>
</FairdaoPage>
<FluentTooltipProvider />
@code {
    string LogName = "Application";
    string LogType;

    PaginationState pagination = new PaginationState { ItemsPerPage = 20 };

    public IQueryable<Records.LogInfo> LogList;

    protected override async Task OnInitializedAsync()
    {
        LoadLogs();
        base.OnInitializedAsync();
    }



    async void LoadLogs()
    {
        WraperFromResult<List<Records.LogInfo>>($"{CurAppHost.ApiAddress}/Sys/SysLogList/{LogName}/{LogType}", token: CurAppHost.Token, okAction: (data) =>
       {
           LogList = data.AsQueryable();
       });
    }

    void ClearLog()
    {
        WraperFromResult<string>($"{CurAppHost.ApiAddress}/Sys/LogClear/{LogName}", token: CurAppHost.Token, okAction: (data) =>
           {
               LoadLogs();
           });
    }

    private static Icon HomeIcon(bool active = false) =>
     active ? new Icons.Filled.Size24.Home()
            : new Icons.Regular.Size24.Home();

    private static Icon AppBarIcon(bool active = false) =>
        active ? new Icons.Filled.Size24.AppsList()
               : new Icons.Regular.Size24.AppsList();

    private static Icon WhatsNewIcon(bool active = false) =>
        active ? new Icons.Filled.Size24.Info()
               : new Icons.Regular.Size24.Info();

    private static Icon IconsIcon(bool active = false) =>
        active ? new Icons.Filled.Size24.Symbols()
               : new Icons.Regular.Size24.Symbols();

    private static Icon DialogIcon(bool active = false) =>
        active ? new Icons.Filled.Size24.AppGeneric()
               : new Icons.Regular.Size24.AppGeneric();


    private void HandleOnClick(IAppBarItem item)
    {


    }

}