@page "/appCenter/disk/list/{HostName}"
@page "/appCenter/disk/list/{HostName}/{Path}"
@inherits AppCenterBase
@namespace FairBox.SuperHost.Pages
@using static FairBox.SuperHost.shared.Records
<FairdaoPage ContentPadding>
    <TitlePanel>
        @Localer["用户磁盘"]【@Path】
    </TitlePanel>
    <ActionPanel>
        <FluentIcon title="上传文件" Value="@(new Icons.Regular.Size24.AddCircle())" Color="Color.Fill" OnClick="@(()=>{NavManager.NavigateTo($"/appCenter/disk/upload/{HostName}/{Uri.EscapeUriString(Path)}/file");})" />
    </ActionPanel>
    <ContentPanel>

        <FluentDataGrid Items="@DirOrFiles" TGridItem="DirOrFile" Virtualize="true" ItemSize="46" OnRowClick="HanderRowClick">
            <TemplateColumn Tooltip="true" SortBy="@sortByName" Title="名称" InitialSortDirection="SortDirection.Ascending">
                <FluentLabel Typo="Typography.Body">
                    <FluentIcon Value="@(GetIcon(context))"></FluentIcon>
                    @(context.Name)
                </FluentLabel>
            </TemplateColumn>
            <TemplateColumn Title="大小" SortBy="@sortBySize">
                @(context.Length)
            </TemplateColumn>
            <TemplateColumn Title="更新时间" SortBy="@sortByEditTime">
                @(DateTimeOffset.UnixEpoch.AddMilliseconds(context.EditTime).ToLocalTime())
            </TemplateColumn>
            <TemplateColumn Title="操作" Align="@Align.End">
                @if (context.Type == "file")
                {
                    <FluentButton Title="下载" IconEnd="@(new Icons.Regular.Size20.DrawerArrowDownload())" Target="_blank" OnClick="@(() =>navManager.NavigateTo($"{CurAppHost.ApiAddress}/Account/Download?path={Uri.EscapeDataString(context.Path)}&key={Uri.EscapeDataString(CurAppHost.Token)}"))" />
                    @if (GetIcon(context) == iconZipFile)
                    {
                        <FluentButton Title="解压文件" IconEnd="@iconZipFile" OnClick="@(() =>CallAPI($"/Proxy/UnzipFile/{context.Name}",okAction:()=>{LoadDir(Path);}))" />
                    }
                }
                <FluentButton Title="删除" IconEnd="@(new Icons.Regular.Size20.Delete())" OnClick="@(() =>CallAPI($"/Proxy/DelFile",$"path={context.Path}",okAction:()=>{LoadDir(Path);}))" />
            </TemplateColumn>
        </FluentDataGrid>
    </ContentPanel>
</FairdaoPage>
<FluentDialogProvider />
@code {
    IQueryable<DirOrFile> DirOrFiles;

    GridSort<DirOrFile> sortByName = GridSort<DirOrFile>.ByAscending(p => p.Name);
    GridSort<DirOrFile> sortBySize = GridSort<DirOrFile>.ByAscending(p => p.Length);
    GridSort<DirOrFile> sortByEditTime = GridSort<DirOrFile>.ByAscending(p => p.EditTime);

    [Parameter]
    public string Path { get; set; } = "/";
    protected override async Task OnInitializedAsync()
    {
        Path = Uri.UnescapeDataString(Path ?? "/");
        await LoadDir(Path);
        base.OnInitializedAsync();
    }


    Icon iconDir = new Icons.Regular.Size20.Folder();
    Icon iconFile = new Icons.Regular.Size20.Document();
    Icon iconZipFile = new Icons.Regular.Size20.FolderZip();
    Icon iconImageFile = new Icons.Regular.Size16.DocumentImage();


    /// <summary>
    /// 获取图标
    /// </summary>
    /// <param name="dirOrFile"></param>
    /// <returns></returns>
    Icon GetIcon(DirOrFile dirOrFile)
    {
        if (dirOrFile.Type != "file")
        {
            return iconDir;
        }
        string extName = null;
        int idx = dirOrFile.Name.IndexOf('.');
        if (idx >= 0) extName = dirOrFile.Name.Substring(idx + 1);
        if (!string.IsNullOrEmpty(extName))
        {
            extName = extName.ToLower();
            switch (extName)
            {
                case "zip":
                case "rar":
                    return iconZipFile;
                case "bmp":
                case "jpg":
                case "jpeg":
                case "png":
                case "svg":
                    return iconImageFile;
            }
        }
        return iconFile;
    }

    async Task LoadDir(string dir)
    {
        if (dir != Path) Path = dir;
        await WraperFromResult<List<DirOrFile>>($"{CurAppHost.ApiAddress}/Disk/Dir", $"dir={dir}", token: CurAppHost.Token, okAction: (data) =>
         {
             this.DirOrFiles = (data ?? new List<DirOrFile>()).AsQueryable();
             this.StateHasChanged();
         });

    }

    async void HanderRowClick(FluentDataGridRow<DirOrFile> row)
    {
        var dirOrFile = row.Item;
        if (dirOrFile.Type != "file")
        {
            await LoadDir(dirOrFile.Path);

            this.StateHasChanged();
        }
        else
        {
            var icon = GetIcon(dirOrFile);
            RenderFragment renderFragment = null;
            if (icon == iconImageFile)
            {
                renderFragment =@<div>
        <img src="@($"{CurAppHost.ApiAddress}/Account/Download?path={Uri.EscapeDataString(dirOrFile.Path)}&key={Uri.EscapeDataString(CurAppHost.Token)}")" />
    </div>
    ;
            }
            else
            {

                WraperFromResult<string>($"{CurAppHost.ApiAddress}/Disk/File", $"file={dirOrFile.Path}", okAction: async (data) =>
                {
                    renderFragment =@<div style="white-space: pre">
        @((MarkupString)data)
    </div>;
                    var dialogInstance = await DialogService.ShowDialogAsync(renderFragment
               , new DialogParameters
               {
                   DialogType = DialogType.SplashScreen,
                   Width = "100%"
               });

                    var result = await dialogInstance.Result;
                    this.StateHasChanged();

                });
                return;

            }

            if (renderFragment != null)
            {
                var dialogInstance = await DialogService.ShowDialogAsync(renderFragment
                    , new DialogParameters
                        {
                            DialogType = DialogType.SplashScreen,
                            Width = "100%"
                        });

                var result = await dialogInstance.Result;
                this.StateHasChanged();
            }
        }
    }
}

}