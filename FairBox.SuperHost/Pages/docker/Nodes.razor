@page "/appCenter/docker/nodes/{HostName}"
@inherits AppCenterBase
@namespace FairBox.SuperHost.Pages
@inject IDialogService DialogService
<FairdaoPage ContentPadding>
    <TitlePanel>
        Docker @Localer["节点列表"] - (@CurAppHost?.Name)
    </TitlePanel>
    <ActionPanel>
        <FluentIcon Value="@(new Icons.Regular.Size24.AddCircle())" Color="Color.Fill" OnClick="OpenGroup" />
    </ActionPanel>
    <ContentPanel>
        @if (Loaded != true)
        {
            <FluentProgressRing></FluentProgressRing>
        }
        else
        {
            <FluentDataGrid Items="@NodeList" Virtualize="true" ItemSize="46">
                <TemplateColumn SortBy="@sortByName" Title="@Localer["节点名"]" InitialSortDirection="SortDirection.Ascending">
                    @(context.HostName)[@context.Address]
                </TemplateColumn>
                <TemplateColumn Title="Id" Align="Align.Center">
                    @(context.Id?.Substring(7, 6))
                </TemplateColumn>
                <TemplateColumn Title="@Localer["节点类型"]" Align="Align.Center">
                    @(context.ManagerStatus.Leader ? "管理节点" : "工作节点") [@(context.ManagerStatus.Addr)][@(context.ManagerStatus.Reachability)]
                </TemplateColumn>
                <TemplateColumn Title="@Localer["版本"]" Align="Align.Center">
                    @(context.Version)
                </TemplateColumn>
                <TemplateColumn Title="@Localer["状态"]" Align="Align.Center">
                    @(context.Status)
                </TemplateColumn>
                <TemplateColumn Title="@Localer["消息"]" Align="Align.Center">
                    @(context.Message)
                </TemplateColumn>
                <TemplateColumn SortBy="@sortByTime" Title="创建时间" Align="Align.End" InitialSortDirection="SortDirection.Descending" IsDefaultSortColumn=true>
                    @(context.Created.ToString("yy-MM-dd HH:mm"))
                </TemplateColumn>

            </FluentDataGrid>
        }
    </ContentPanel>
</FairdaoPage>


<FluentDialogProvider />
<FluentToastProvider />
@code {
    IQueryable<shared.Records.DockerNode> NodeList;
    GridSort<shared.Records.DockerNode> sortByName = GridSort<shared.Records.DockerNode>.ByAscending(p => p.HostName);
    GridSort<shared.Records.DockerNode> sortByTime = GridSort<shared.Records.DockerNode>.ByAscending(p => p.Created);


    protected override async Task OnInitializedAsync()
    {

        LoadNodes();
        base.OnInitializedAsync();
    }


    void LoadNodes()
    {
        WraperFromResult<List<shared.Records.DockerNode>>($"{CurAppHost.ApiAddress}/Docker/Nodes", token: CurAppHost.Token, okAction: (data) =>
       {
           NodeList = data.AsQueryable();
           this.StateHasChanged();
       });

    }






    async Task OpenGroup()
    {

        string subTitle = $"集群初骀化";
        var dialog = await DialogService.ShowDialogAsync<OpenSwarmDialog>(new DockerSwarmInitParameter() { IpAddress = "127.0.0.1" }, new DialogParameters()
            {
                Title = subTitle,
                PreventDismissOnOverlayClick = true,
                PreventScroll = true,
            });

        var result = await dialog.Result;
        if (!result.Cancelled && result.Data != null)
        {
            var data = (DockerSwarmInitParameter)result.Data;

            DialogParameters<SplashScreenContent> parameters = new()
                {
                    Content = new SplashScreenContent()
                    {

                        DisplayTime = 0,
                        Title = "节点管理",
                        SubTitle = subTitle,
                        LoadingText = "正在处理..."
                    },
                    PreventDismissOnOverlayClick = true,
                    Modal = false
                };
            var _dialog = await DialogService.ShowSplashScreenAsync(parameters);


            WraperFromResult<List<shared.Records.DockerNode>>($"{CurAppHost.ApiAddress}/Docker/SwarmInit", $"ipAddress={data.IpAddress}&nodeType={data.NodeType}&token={data.Token}", token: CurAppHost.Token, okAction: (data) =>
           {

               _dialog.CloseAsync();
               LoadNodes();
           });





        }


    }


}