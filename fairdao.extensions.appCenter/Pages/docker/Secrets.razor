@page "/appCenter/docker/secrets/{HostName}"
@inherits AppCenterBase
@namespace fairdao.extensions.appCenter.Pages
@inject IDialogService DialogService
<FairdaoPage ContentPadding>
    <TitlePanel>
        Docker @Localer["密钥列表"] - (@CurAppHost?.Name)
    </TitlePanel>
    <ActionPanel>
        <FluentIcon Value="@(new Icons.Regular.Size24.AddCircle())" Color="Color.Fill" OnClick="OnOpen" />
    </ActionPanel>
    <ContentPanel>

        <FluentDataGrid Items="@secreets" Virtualize="true" ItemSize="46">
            <ChildContent>
                <TemplateColumn SortBy="@sortByName" Title="名称" InitialSortDirection="SortDirection.Ascending">
                    @(context.Name)
                </TemplateColumn>
                <TemplateColumn Title="Id" Align="Align.Center">
                    @(context.Id?.Substring(0, 6))
                </TemplateColumn>

                <TemplateColumn Title="标签" Align="Align.Center">
                    @(context.Labels)
                </TemplateColumn>
                <TemplateColumn SortBy="@sortByTime" Title="创建时间" Align="Align.End" InitialSortDirection="SortDirection.Descending" IsDefaultSortColumn=true>
                    @(context.Created.ToString("yy-MM-dd HH:mm"))
                </TemplateColumn>
                <TemplateColumn Title="Actions" Align="@Align.End">
                    <FluentButton Title="删除" IconEnd="@(new Icons.Regular.Size16.Delete())" OnClick="@(() => Delete(context))" />
                </TemplateColumn>
            </ChildContent>
            <EmptyContent>
                <FairdaoPageMessage RecordNotFound></FairdaoPageMessage>
            </EmptyContent>
            <LoadingContent>
                <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Center">
                    Loading...<br />
                    <FluentProgress Width="240px" />
                </FluentStack>
            </LoadingContent>
        </FluentDataGrid>

    </ContentPanel>
</FairdaoPage>
<FluentDialog @ref="_myFluentDialog" @bind-Hidden="@Hidden" Modal="true" TrapFocus="true" PreventScroll="true">
    <FluentDialogHeader Visible="false" />
    <h2>添加或更新密钥</h2>
    <FluentStack Orientation="Orientation.Vertical">
        <FluentTextField @bind-Value=Name style="width: 100%;" Label="@(Localer["密钥名称"])"></FluentTextField>
        <FluentTextField @bind-Value=Labels style="width: 100%;" Label="@(Localer["标签列表"])" Placeholder="标签列表:多个用,隔开"></FluentTextField>
        <FluentTextField @bind-Value=Data style="width: 100%;" Label="@(Localer["数据"])"></FluentTextField>
    </FluentStack>
    <FluentStack HorizontalAlignment="HorizontalAlignment.Center" VerticalAlignment="VerticalAlignment.Center" Style="height:60px;">
        <FluentButton Appearance="Appearance.Accent" OnClick="CreateService">创建或更新</FluentButton>
        <FluentButton Appearance="Appearance.Accent" Autofocus="true" @onclick="OnClose">关闭</FluentButton>
    </FluentStack>
</FluentDialog>
<FluentDialogProvider />
<FluentToastProvider />
@code {
    IQueryable<shared.Records.DockerSecret> secreets;
    GridSort<shared.Records.DockerSecret> sortByName = GridSort<shared.Records.DockerSecret>.ByAscending(p => p.Name);
    GridSort<shared.Records.DockerSecret> sortByTime = GridSort<shared.Records.DockerSecret>.ByAscending(p => p.Created);

    string Data;
    string Name;
    string Labels;

    private FluentDialog? _myFluentDialog;
    private bool Hidden { get; set; } = true;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
            _myFluentDialog!.Hide();
    }

    private void OnOpen()
    {
        _myFluentDialog!.Show();
    }

    private void OnClose()
    {

        _myFluentDialog!.Hide();
    }

    protected override async Task OnInitializedAsync()
    {

        LoadSecrets();
        base.OnInitializedAsync();
    }



    void LoadSecrets()
    {
        WraperFromResult<List<shared.Records.DockerSecret>>($"{CurAppHost.ApiAddress}/Docker/Secret/ls", "", HttpMethod.Post, token: CurAppHost.Token, okAction: (data) =>
     {
         secreets = data.AsQueryable();
         this.StateHasChanged();
     });
    }

    void Delete(shared.Records.DockerSecret image)
    {
        WraperFromResult<string>($"{CurAppHost.ApiAddress}/Docker/Secret/rm/{image.Id}", "", HttpMethod.Post, token: CurAppHost.Token, okAction: (data) =>
     {

         LoadSecrets();
     });
    }

    async Task CreateService()
    {
        WraperFromResult<string>($"{CurAppHost.ApiAddress}/Docker/Secret/Create", $"labels={Labels}&data={Data}&name={Name}", HttpMethod.Post, token: CurAppHost.Token, okAction: (data) =>
    {
        _myFluentDialog!.Hide();
        LoadSecrets();
    });
    }

}