@inherits fairdao.extensions.shared.Pages.Page
@namespace fairdao.extensions.appCenter.Pages
@using ApexCharts
@using fairdao.extensions.shared.entity
@inject IDialogService DialogService
@using static fairdao.extensions.appCenter.shared.Records
@using Color= Microsoft.FluentUI.AspNetCore.Components.Color


<FairdaoPage ContentPadding>
	<TitlePanel>
		@Localer["主机管理"]
	</TitlePanel>
	<ActionPanel>
		<FluentIcon Value="@(new Icons.Regular.Size20.Add())" Title="@Localer["添加主机"]" Color="Color.Fill" OnClick="AddHost" />
	</ActionPanel>
	<ContentPanel>
		<FluentGrid>
			@if (appHosts != null)
			{
				@foreach (var item in appHosts)
				{
					<FluentGridItem sm="12" lg="4">
						<FluentCard>
							<FluentHeader>
								@item.Name
								<FluentSpacer />
								<FluentIcon Value="@(new Icons.Regular.Size20.DualScreenUpdate())" Title="@Localer["更新"]" Color="Color.Fill" OnClick="@(() => UpdateHostInfo(item) )" />
								<FluentIcon Value="@(new Icons.Regular.Size20.ArrowClockwise())" Title="@Localer["重启"]" Color="Color.Fill" OnClick="@(() => Restart(item) )" />
								<FluentIcon Value="@(new Icons.Regular.Size20.Delete())" Title="@Localer["移除"]" Color="Color.Fill" OnClick="@(() => Delete(item) )" />
							</FluentHeader>
							<FluentStack Orientation=" Microsoft.FluentUI.AspNetCore.Components.Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Center">
								<AppHostChart DataSource="item" />
								<AppHostNetwork DataSource="item" />
							</FluentStack>
							<FluentDivider Style="padding-bottom:1rem;" />
							<AppCenterOpeator DataSource="item" />

						</FluentCard>

					</FluentGridItem>
				}
			}
		</FluentGrid>

	</ContentPanel>
</FairdaoPage>

<FluentDialogProvider />
@code {


	async Task UpdateHostInfo(AppHost host)
	{
		await WraperFromResult<HostInfo.Base>($"{host.ApiAddress}/Sys/Info", okAction: async (data) =>
			{
				host.BaseInfo = data;
				host.Name = $"{data.OSName}-{data.HostName}";
					await	sysHelper.SetCache("appcenterConfig", CurExtender.AppConfig);
				this.StateHasChanged();
			});
	}


	IQueryable<AppHost> appHosts;
	AppHost? SelectedHost;

	Dictionary<string, object>? Params { get; set; }

	GridSort<AppHost> sortByName = GridSort<AppHost>.ByAscending(p => p.Name);



	protected override async Task OnInitializedAsync()
	{


		var appHosts = CurExtender.AppConfig?.Hosts?.AsQueryable();
		if (appHosts != null)
		{
			this.appHosts = appHosts;
			foreach (var host in appHosts)
			{
				LoadHost(host);
			}
		}

		Task.Run(() => SaveHostData());

		base.OnInitializedAsync();
	}
	async void Delete(AppHost host)
	{
		CurExtender.AppConfig.Hosts.Remove(host);
		await sysHelper.SetCache("appcenterConfig", CurExtender.AppConfig);

	}



	void LoadHost(AppHost host)
	{
		if (host.Resources == null)
		{
			host.Resources = new List<HostInfo.RealtimeInfo>();
		}
		if (host.Resources.Count == 0)
		{
			host.Resources.Add(new HostInfo.RealtimeInfo(0, 0, 0, 0, 0, 0, 0));
		}
		if (host.Chart == null) host.Chart = new ApexChart<HostInfo.RealtimeInfo>();

	}


	async void SaveHostData()
	{
		while (!stopping)
		{
			await Task.Delay(10000);
			try
			{
				if (nextSaveTime < DateTime.Now)
				{
					nextSaveTime = DateTime.Now.AddMinutes(1);
					await sysHelper.SetCache("appcenterConfig", CurExtender.AppConfig);
				}
			}
			catch
			{

			}
			await Task.Delay(60000);
		}

	}

	DateTime nextSaveTime;



	async void Restart(AppHost host)
	{

		WraperFromResult<string>($"{host.ApiAddress}/Proxy/Restart", "", HttpMethod.Post, token: host.Token, okAction: (data) =>
		{

			DialogService.ShowSuccessAsync("主机服务已重启！");
		});
	}

	bool stopping = false;

	protected override ValueTask DisposeAsync(bool disposing)
	{
		stopping = true;
		return base.DisposeAsync(disposing);
	}

	protected override void OnParametersSet()
	{
		base.OnParametersSet();
	}







	async void AddHost()
	{
		AppHost host = new AppHost { Name = "新的主机" };
		DialogParameters parameters = new()
			{
				Title = "添加主机",
				PrimaryAction = "Yes",
				SecondaryAction = "No",
				Width = "500px",
				TrapFocus = true,
				Modal = true,
				PreventScroll = true,
				ShowDismiss = false

			};

		IDialogReference dialog = await DialogService.ShowDialogAsync<AppCenterDialog>(host, parameters);
		DialogResult? result = await dialog.Result;


		if (!result.Cancelled)
		{
			AppHost? newHost = result.Data as AppHost;
			if (newHost?.BaseInfo != null)
			{
				if (CurExtender.AppConfig.Hosts == null) CurExtender.AppConfig.Hosts = new();
				CurExtender.AppConfig.Hosts.Add(newHost);
				await sysHelper.SetCache("appcenterConfig", CurExtender.AppConfig);
				appHosts = CurExtender.AppConfig?.Hosts?.AsQueryable();
				LoadHost(newHost);
				this.StateHasChanged();
			}

		}

	}
}